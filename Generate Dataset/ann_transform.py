import os
import pickle
import xml.etree.ElementTree as ET
from glob import glob
from PIL import Image
from skimage import io

dota_v2=('large-vehicle', 'swimming-pool', 'helicopter', 'bridge',
                'plane', 'ship', 'soccer-ball-field', 'basketball-court',
                'ground-track-field', 'small-vehicle', 'baseball-diamond',
                'tennis-court', 'roundabout', 'storage-tank', 'harbor',
                'container-crane', 'airport', 'helipad')

dior = ('airplane', 'airport', 'baseballfield', 'basketballcourt', 'bridge',
        'chimney', 'expressway-service-area', 'expressway-toll-station',
        'dam', 'golffield', 'groundtrackfield', 'harbor', 'overpass', 'ship',
        'stadium', 'storagetank', 'tenniscourt', 'trainstation', 'vehicle',
        'windmill')

fair1m = ('A220','A321','A330','A350','ARJ21','Baseball-Field','Basketball-Court',
'Boeing737','Boeing747','Boeing777','Boeing787','Bridge','Bus','C919','Cargo-Truck',
'Dry-Cargo-Ship','Dump-Truck','Engineering-Ship','Excavator','Fishing-Boat','Football-Field',
'Intersection','Liquid-Cargo-Ship','Motorboat','other-airplane','other-ship','other-vehicle',
'Passenger-Ship','Roundabout','Small-Car','Tennis-Court','Tractor','Trailer','Truck-Tractor','Tugboat','Van','Warship')

# transform pkl generated by BBoxTookit after clipping to txt files
def boxtoolpkl_to_dotatxt():
    pkl_path = '/root/dataset/fair1m_1024/trainval/annfiles/patch_annfile.pkl'
    save_path = '/root/dataset/fair1m_1024/trainval/rbbtxts/'
    lbl2cls = {k:v for k,v in enumerate(fair1m)}
    pkl_file = pickle.load(open(pkl_path,'rb'))
    classes = pkl_file['cls']
    content = pkl_file['content']
    print('Number of clipped data: {}'.format(len(content)))
    for i in range(len(content)):
        filename = content[i]['filename'][:-4]
        ann = content[i]['ann']
        boxes = ann['bboxes']
        # label start from 0
        labels = ann['labels']
        f = open(os.path.join(save_path, '{}.txt'.format(filename)), 'w')
        for j in range(boxes.shape[0]):
            box = boxes[j]
            label = labels[j]
            category = lbl2cls[label]
            f.write('{} {} {} {} {} {} {} {} {} {}\n'.format(box[0],box[1],box[2],box[3],box[4],box[5],box[6],box[7],category,label))
        f.close()
        print('pkl to txt of image {}: {}'.format(i, filename))

# transform xml annotated in fair1m to dota txt files for clipping
def fair1m_xml_to_txt():
    xml_path = '/root/dataset/fari1m_original/valid/labelXml/'
    save_path = '/root/dataset/fari1m_original/valid/annots/'
    cls2lbl = {k:v for v,k in enumerate(fair1m)}
    xml_files = glob(os.path.join(xml_path,'*.xml'))
    print('FAIR1M dataset contains {} xmls'.format(len(xml_files)))
    cnt = 0
    for xml_file in xml_files:
        filename = os.path.basename(xml_file)[:-4]
        tree = ET.parse(xml_file)
        root = tree.getroot()
        f = open(os.path.join(save_path, '{}.txt'.format(filename)), 'w')
        for obj in root.findall('objects/object'):
            category = str(obj.find('possibleresult/name').text).replace(' ','-')
            label = int(cls2lbl[category])
            points = obj.find('points')
            point_list = []
            for point_obj in points.findall('point'):
                point_list.append(point_obj.text)
            x1, y1 = point_list[0].split(',')
            x2, y2 = point_list[1].split(',')
            x3, y3 = point_list[2].split(',')
            x4, y4 = point_list[3].split(',')
            f.write('{} {} {} {} {} {} {} {} {} {}\n'.format(x1, y1, x2, y2, x3, y3, x4, y4, category, label))
        f.close()
        print('xml to txt of image {}: {}'.format(cnt, filename))
        cnt += 1

# since train and val sets of fair1m have the same names

def rename_and_move():
    
    trn_img_path = '/root/dataset/fari1m_original/train/image/'
    trn_txt_path = '/root/dataset/fari1m_original/train/annot/'
    val_img_path = '/root/dataset/fari1m_original/valid/images/'
    val_txt_path = '/root/dataset/fari1m_original/valid/annots/'
    save_path = '/root/dataset/fari1m_original/trainval/'
    ### train
    cnt = 0
    trn_img_files = glob(os.path.join(trn_img_path,'*.tif'))
    print('FAIR1M train dataset contains {} imgs'.format(len(trn_img_files)))
    for img_file in trn_img_files:
        filename = os.path.basename(img_file)[:-4]
        img = io.imread(img_file)
        img = Image.fromarray(img)
        img.save(os.path.join(save_path,'images', 'train_'+filename+'.png'))
        
        f = open(os.path.join(trn_txt_path, filename+'.txt'),'r')
        data = f.readlines()
        f.close()

        f = open(os.path.join(save_path,'annots', 'train_'+filename+'.txt'), 'w')
        f.writelines(data)
        f.close()

        print('transfer train image {}: {}'.format(cnt, filename))
        cnt += 1

    ### validaion
    cnt = 0
    val_img_files = glob(os.path.join(val_img_path,'*.tif'))
    print('FAIR1M valid dataset contains {} imgs'.format(len(val_img_files)))
    for img_file in val_img_files:
        filename = os.path.basename(img_file)[:-4]
        img = io.imread(img_file)
        img = Image.fromarray(img)
        img.save(os.path.join(save_path,'images', 'valid_'+filename+'.png'))
        
        f = open(os.path.join(val_txt_path, filename+'.txt'),'r')
        data = f.readlines()
        f.close()

        f = open(os.path.join(save_path,'annots', 'valid_'+filename+'.txt'), 'w')
        f.writelines(data)
        f.close()

        print('transfer valid image {}: {}'.format(cnt, filename))
        cnt += 1


    

if __name__=="__main__":
    boxtoolpkl_to_dotatxt()
    #fair1m_xml_to_txt()
    #rename_and_move()

            

